name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest   # Jenkins used Windows with PowerShell

    env:
      JIRA_URL: https://ravindradevops25.atlassian.net
      JIRA_PROJECT_KEY: SCRUM
      JIRA_ISSUE_TYPE: Bug
      SEVERITY_THRESHOLD: high

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Tools
        shell: pwsh
        run: |
          Write-Output "[DEBUG] Starting tool verification..."
          $nodePath    = "C:\\Program Files\\nodejs\\node.exe"
          $npmPath     = "C:\\Program Files\\nodejs\\npm.cmd"
          $snykPath    = "$env:USERPROFILE\\AppData\\Roaming\\npm\\snyk.cmd"
          $pythonPath  = "C:\\hostedtoolcache\\windows\\Python\\3.12.0\\x64\\python.exe"

          if (-Not (Test-Path $nodePath))   { Write-Error "Node.js not found"; exit 1 }
          if (-Not (Test-Path $npmPath))    { Write-Error "npm not found"; exit 1 }
          if (-Not (Test-Path $snykPath))   { Write-Error "Snyk not found"; exit 1 }
          if (-Not (Test-Path $pythonPath)) { Write-Error "Python not found"; exit 1 }

          & $nodePath --version
          & $npmPath --version
          & $pythonPath --version
          & $snykPath --version
          Write-Output "[DEBUG] Tool verification completed successfully."

      - name: Install Python Dependencies
        shell: pwsh
        run: |
          Write-Output "[DEBUG] Installing Python dependencies..."
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -r requirements.txt
          Write-Output "[DEBUG] Dependencies installed successfully."

      - name: Snyk Auth
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        shell: pwsh
        run: |
          Write-Output "[DEBUG] Starting Snyk auth..."
          snyk auth $env:SNYK_TOKEN
          Write-Output "[DEBUG] Auth success."

      - name: Run Snyk Scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        shell: pwsh
        run: |
          Write-Output "[DEBUG] Running Snyk scan..."
          snyk test --json > snyk-results.json || exit 0
          Write-Output "[DEBUG] Snyk scan completed."

      - name: Parse Results and Create JIRA Ticket
        shell: pwsh
        env:
          JIRA_USER: ${{ secrets.JIRA_USER }}
          JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
        run: |
          Write-Output "[DEBUG] Checking snyk results..."
          $results = Get-Content snyk-results.json | ConvertFrom-Json
          if ($results.vulnerabilities.Count -gt 0) {
            Write-Output "[DEBUG] Vulnerabilities found, creating Jira ticket..."
            python tools/create_jira_issue.py `
              --jira-url $env:JIRA_URL `
              --project $env:JIRA_PROJECT_KEY `
              --issuetype $env:JIRA_ISSUE_TYPE `
              --severity $env:SEVERITY_THRESHOLD `
              --input snyk-results.json
          } else {
            Write-Output "[DEBUG] No vulnerabilities found, skipping Jira ticket creation."
          }
